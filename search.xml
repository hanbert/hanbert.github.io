<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Devstack部署Openstack开发环境]]></title>
      <url>%2F2017%2F04%2F09%2FDevstack%E9%83%A8%E7%BD%B2Openstack%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
      <content type="text"><![CDATA[Devstack 是面向 Openstack 开发者的快速自动化部署 Bash 脚本，提供了辅助开发和调试的源码环境，能够支持 All-In-One 和多节点部署模式，同时也支持 Plug-in 模式。Devstack 的使用可以说贯穿整个 Openstack 开发生涯，熟练的使用 Devstack 能有效提高开发效率。 正如官方所强调的：Devstack不适合生产环境！ 支持的服务基础的操作系统 OpenStack技术委员会把现在的CI策略定义为支持最新的Ubuntu发行版和最新的RHEL发行版（为了测试Python2.6）。 Ubuntu: current 长期支持版(LTS release)加上现在的开发版 Fedora: 当前版本加上之前的版本 RHEL: 当前的主要发行版本 其他OS平台可能继续支持，比如：Debian、OpenSUSE，但不是所有这些存在的平台都能得到支持 Ubuntu或是Fedora的补丁不会被支持，因为对其他的平台有副作用 数据库 MySQL PostgreSQL 消息队列 Rabbit Qpid Web服务器 Apache Openstack网络 默认使用Nova Network，可以选定使用Neutron Nova Network: FlatDHCP Neutron: 使用linuxbridge或是 OpenVSwitch的基本配置，接近于初始的FlatDHCP方式。 Openstack服务 DevStack中配置的默认服务有： 认证（Keystone） 对象存储（Swift） 映像存储（Glance） 块存储（Cinder） 计算（Nova） 控制面板（Horizon） 编排（Heat） 其他没有直接包含在DevStack中的附加服务可以通过插件机制绑定在stack.sh里面插件机制可以调用脚本来进行配置和启动相关服务 节点配置 单一节点 多节点，但不是重点支持对象，核心团队并不定期测试多节点的配置，即使测试也只包含最小配置 Devstack 的安装与使用Devstack的安装过程比较简单，只需要从github库中git clone下来源码到本地，然后对本地做简单的配置即可。 安装Linux本次使用的是Openstack官网推荐的Ubuntu16.04。由于Devstack自动部署过程中很多地方都需要用到git的相关命令，所以我们先为操作系统安装git：1# apt-get install git 添加stack用户Devstack必须运行在非root用户下，且该用户必须要sudo权限，本次为系统添加一个stack用户。1234#切换到root用户$ su#添加账户，并指定shell和home所在地# useradd -s /bin/bash/ -d /opt/stack -m stack 为刚添加的stack账户添加sudo权限12# tee &lt;&lt;&lt; &quot;stack ALL=(ALL) NOPASSWD:ALL&quot; /etc/sudoers# su - stack 在Ubuntu中sudoers即使root用户默认也没有权限修改的，所以使用tee命令来写入，可以避免权限问题也可以直接找到/etc/shudoers这个文件，改变其读写权限，然后打开文件写入，当不推荐这样做 下载Devstack 可以直接从github上下载最新版的额Devstack源码12$ git clone https://git.openstack.org/openstack-dev/devstack$ cd devstack Download 下来的源码中就包含安装Openstack的脚本和相应的配置模板，理论上，现在就可以运行stack.sh脚本来安装Openstack。但往往为了方便我们开发使用，及保证安装的成功率，我们会在local.conf文件中进行一些配置，覆盖掉其默认的配置后，再进行安装。 开始安装 下载完Devstack，并做好配置后，就可以开始安装Openstack了，只需要运行devstack/目录下的stack.sh脚本既可以全自动进行安装，这期间会遇到一些问题，需要一点点手动解决。所以安装时间的长短因人而异。1$ ./stack.sh 由于默认Devstack是从github直接拉取源码进行安装，所以需要一个好的网络环境才可以，如果不具备，则可以考虑换一个靠谱点的git库，比如：http://git.trystack.cn，这个git库测试性能良好。如果一切顺利的话，大概20-30分钟可以完全部署完。如果遇到错误，需要手动解决ERROR后重新跑脚本，这样安装时间可能是具体情况无限制的延长。 Devstack的配置过程Devstack一致致力于通过最少的配置完成最多的功能。因为各个项目加入了新的特性，新的项目加入，还有不同的组合需要测试，选项的数目已经飞速地膨胀了。DevStack的传统做法是从localrc文件得到所有的本地化的配置和定制信息。传递给各个项目的配置变量的数目也在增加。原有的机制 (EXTRAS_OPTS之类)需要对每个文件进行编码，已经不太适应现在的环境。在2013年10月引入了一个新的配置方式local.conf（参看https://review.openstack.org/#/c/46768/），希望能够简化配置过程，达到下列目的： 在单一的文件中包含所有非默认的本地配置 与 localrc 的方式向后兼容，保证迁移过程的平滑 允许对任意配置文件中的设置进行更改 现在 Devstack 提供了两种配置安装的方式 local.conf(新版) 和 localrc(旧版),，两种方式我们都应该有所了解， 因为在不同的团队中会习惯的选择使用其中一种甚至两种方式。 local.conf local.conf文件的样例路径为：devstack/samples/local.conf 新的配置文件是local.conf，和旧的localrc文件在同一个目录。它是一个修正后的INI格式文件，引入了meta-section（[[&lt;phase&gt;|&lt;config-file-name&gt;]]）来承载额外的信息。改文件最终会被stack.sh脚本加载使用，所以其语法必须是符合Bash语法规则的，比如：等号“=”的两边不能存在空格。 Section（也就是&lt;phase&gt;）有以下几种类型：”local”、”post-config”、”extra”、”post-extra”。它们规定了Devstack的安装流程和配置，在安装过程中会严格按照这个顺序进行读取和执行： local：对应的Section为[[local|localrc]]，指定在local.conf被stackrc加载之前，先从localrc中提取配置项，配置实例如下： 12345[[local|localrc]]ADMIN_PASSWORD=nomoresecretDATABASE_PASSWORD=stackdbRABBIT_PASSWORD=stackqueueSERVICE_PASSWORD=$ADMIN_PASSWORD post-config：对应的Section为[[post-config|/$Q_PLUGIN_CONF_FILE]]，指定在项目服务自动配置完成后，且在服务正式启动之前，这其中的配置选项会被执行，配置实例如下： 123456789[[post-config|/$NOVA_CONF]][DEFAULT]use_syslog = True[osapi_v3]enabled = False# NOTE: Q_PLUGIN_CONF_FILE 独特之处在于它的配置项如果在前面不加 `/`， 那么这个配置项就不会生效。所以为了使其生效添加 `/` 是必须的。 extra：指定在各Openstack项目的主服务启动之后，并且在extra.d中的文件别执行之前，extra的配置项会被执行 post-extra：指定在extra.d中的文件被执行之后，执行post-extra中的配置项。 从以上可以看出，这么多的Section只是指定了其中的配置项在安装过程中的那个阶段被加载，一般情况下，我们只需要关注local这个Section即可，其他的稍作了解一下即可。 [[local|localrc]]是一个非常特别的Section，我们可以将配置项全部都定义到其下，并且它还指定了是否会将Devstack根目录下的localrc文件的配置项提取到其下，同时也允许所有的自定义安装配置项都包含在localrc文件中。 这样做只是为了将Devstack的配置方式从localrc平滑过渡到local.conf，也就是说，可以将所有的安装配置项都定义到localrc，而无需修改local.conf文件。 一个最小化安装Openstack的local.conf配置样例： 12345678[[local|localrc]]HOST_IP=192.168.0.2 ADMIN_PASSWORD=&lt;YOUR_PASSWORD&gt;DATABASE_PASSWORD=$ADMIN_PASSWORDRABBIT_PASSWORD=$ADMIN_PASSWORDSERVICE_PASSWORD=$ADMIN_PASSWORD#FIXED_RANGE=172.31.1.0/24#FLOATING_RANGE=192.168.20.0/25 在上面的配置中，主要做了两件事情，第一、在HOST_IP字段指定本机的IP，这个是为了方面后面建立Endpoint，即所有服务的API用到的IP。理论上，Devstack可以自动检测本机IP，但是这个功能不能特别完善，有时候会出错，所有建议手动指定；第二、指定了各项需要服务的密码，&lt;YOUR_PASSWORD&gt;字段换成你自己想用的密码即可。FIXED_RANGE和FLOATING_RANGE两个字段可以用来指定内网和公网IP地址的范围，此处被注释掉了，使用其默认的网络配置。 Devstack的部署流程及需要注意的问题Devstack的自动化部署流程大概包含以下几个主要步骤： 加载配置文件local.conf和localrc(如果用到了的话) 安装依赖包，此时是从系统的软件库中拉取的依赖包，包括安装pip的过程 安装消息队列和数据库 安装Openstack Clients 安装并配置Openstack的各项服务，此时为从github库中直接拉取源码 下载和上传镜像文件，从镜像的提供方官网下载的镜像 显示登录信息，出现这个信息说明部署成功了 其中下载依赖包，由于是从系统的软件库中直接边下载变安装的，所以建议提前对操作系统进行换源，以防以为网络问题导致安装失败。在Centos7和Ubuntu16.04两种操作系统上，经过测试阿里云源表现还是不错的： Centos7系统更换阿里云源： 123# cd /etc/yum.repos.d# cp CentOS-Base.repo CentOS-Base.repo.bak //备份原来的源# vim CentOS-Base.repo //打开源的文件，删除原有的源，写入新的源 清空原本CentOS-Base.repo的内容，写入如下的内容： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client. You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead.##[base]name=CentOS-$releasever - Base - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=osgpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7#released updates [updates]name=CentOS-$releasever - Updates - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/updates/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updatesgpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7[updates]name=CentOS-$releasever - Updates - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/updates/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updatesgpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7#additional packages that may be useful[extras]name=CentOS-$releasever - Extras - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extrasgpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7#additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever - Plus - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplusgpgcheck=1enabled=0gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7#contrib - packages by Centos Users[contrib]name=CentOS-$releasever - Contrib - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/contrib/$basearch/#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contribgpgcheck=1enabled=0gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 然后执行以下命令，确定阿里云源已经正常工作： 1# yum update //升级本系统的软件 Ubuntu16.04更换阿里云源： 123# cd /etc/apt/# cp sources.list sources.list.bak //备份原有的源# vim sources.list //打开源文件，清空原有的源，写入新的源 清空sources.list中的原有内容，写入如下的内容： 123456789101112131415161718# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 然后执行以下命令，确定阿里云源已经换源成功： 12# apt-get update# apt-get upgrade //升级本系统的软件 不同版本的操作系统，对应的源的地址不同，此处只写出了centos7和ubuntu16.04的操作系统对应的阿里云源，其他版本系统的请自行网上搜索。 安装pip过程中可能遇到的问题 在安装pip的过程中，Devstack会从网上先下载一个get-pip.py的文件到devstack/files/文件夹下面，然后执行python get-pip.py运行这段程序来安装pip。所以当这个过程因为网络问题，导致get-pip.py不能够正常下载，导致安装失败的时候，我们可以手动下载get-pip.py文件，然后将其放入devstack/files/文件夹下面。 除了上面的方法之外，我们也可以手动安装pip123&gt; $ apt-get install python-pip //安装pip&gt; $ pip install --upgrade pip //升级到最新版本&gt; pip换源的问题 由于Devstack部署过程中会用pip安装许多的软件包，而默认的pip的源的地址为https://pypi.python.org/simple这个地址在国内网络环境下访问不是很顺畅，时常出现下载包失败的情况，所以建议更换为国内源，此处换成了豆瓣源： 12$ sodu mkdir /root/.pip/ //新建一个.pip文件夹$ vim /root/.pip/pip.conf //在新建的文件夹下面新建pip.conf文件 然后在pip.conf文件中写入以下内容： 12[global]index-url = https://pypi.douban.com/simple 此时即可换源成功。 pip安装软件包的问题 如果换源后，pip中的某些软件包，仍然会从官方源下载，并且导致下载失败，可以手动停掉当然运行stack.sh脚本，把出错的安装命令复制一遍，手动指定安装源来进行安装，一般能够成功。命令格式为： 1$ pip install &lt;YOUR_PACKAGES&gt; -i https://pypi.doubanio.com/simple 这样该软件包就可以从我们指定的源地址进行下载安装。 再部署过程中很多软件包pip自动安装失败，导致部署过程出错的问题，都可以通过手动指定软件源，手动安装，然后重新跑stack.sh来解决。 另外，如果安装过程中出现如下错误： 1232016-04-10 08:40:55.596 | [ERROR] /home/devstack/functions-common:1066 Failed to update apt repos, we’re dead now2016-04-10 08:40:56.600 | Error on exit2016-04-10 08:40:56.601 | ./stack.sh: line 488: generate-subunit: command not found 可以通过运行如下三条命令来解决： 123sudo apt-get install python-pipsudo pip install --upgrade pipsudo pip install -U os-testr -i https://pypi.douban.com/simple 长时间卡在运行setup.py程序 如果运行过程中，出现长时间卡在这一步的情况，基本可以手动Ctrl-C停掉部署过程，然后向上翻输出的部署过程，找到如下内容： 1sudo -H http_proxy= https_proxy= no_proxy= PIP_FIND_LINKS= SETUPTOOLS_SYS_PATH_TECHNIQUE=rewrite /usr/local/bin/pip2.7 install -c /opt/stack/requirements/upper-constraints.txt -e /opt/stack/keystone 复制这段文字，然后手动运行这段命令，运行过程中如果出现安装源的问题，就用上面的-i https://pypi.douban.com/simple来制定安装源，如果能正常下载安装，就让它继续安装就可以，另外，此过程中如果出现某一个软件包安装时间过程也可以按一下Crtl-C，会自动重新安装这个软件包。 Python虚拟环境搭建与使用 123$ pip install virtualenv #安装virtualenv工具$ virtualenv venvName # 创建名为venvName的虚拟环境$ source venvName/bin/activate # 进入虚拟环境 在部署过程中，Devstack会搭建好几个虚拟环境，这些虚拟环境都可以用上面的第三条命令来手动进入。 Devstack 多节点部署Devstack大部分时候只是用来搭建一个all in one的开发测试环境，并不能够用于生产环境，但是作为一个部署工具，其本身也能够承担起多节点部署的任务。Devstack的多节点部署的本质就是：在不同的节点上，使用不同的local.conf配置文件来运行Devstack的部署脚本。但需要注意的是，Openstack的多节点部署不仅仅意味着不同的项目部署到不同的节点上，我们应该理解为，将Openstack不同的服务部署到不同的节点上，不同节点承担不同的功能。 一般来说，很少有人用Devstack来进行多节点的部署，这里可以只做了解即可。 Controller节点的配置文件内容： 123456789101112131415161718192021222324252627# MiscADMIN_PASSWORD=&lt;YOUR_PASSWORD&gt;DATABASE_PASSWORD=$ADMIN_PASSWORDRABBIT_PASSWORD=$ADMIN_PASSWORDSERVICE_PASSWORD=$ADMIN_PASSWORDSERVICE_TOKEN=$ADMIN_PASSWORD# Target PathDEST=/opt/stack.mitaka# Enable LoggingLOGFILE=$DEST/logs/stack.sh.logVERBOSE=TrueLOG_COLOR=TrueSCREEN_LOGDIR=$DEST/logs# Current host ipHOST_IP=192.168.56.102FLAT_INTERFACE=eth1# 这个地方选择 True， 开启多节点部署MULTI_HOST=True# 将应该部署到这个节点上的都 enable，部署到其他节点的都 disable# Enable/Disable Nova/Cinder ControllerNode serviceenable_service n-novnc n-cauthdisable_service n-cpu n-net n-api-meta c-vol computer节点的配置文件内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143# MiscADMIN_PASSWORD=&lt;YOUR_PASSWORD&gt;DATABASE_PASSWORD=$ADMIN_PASSWORDRABBIT_PASSWORD=$ADMIN_PASSWORDSERVICE_PASSWORD=$ADMIN_PASSWORDSERVICE_TOKEN=$ADMIN_PASSWORD# Target PathDEST=/opt/stack.mitaka# Enable LoggingLOGFILE=$DEST/logs/stack.sh.logVERBOSE=TrueLOG_COLOR=TrueSCREEN_LOGDIR=$DEST/logs# Current host ipHOST_IP=192.168.56.103FLAT_INTERFACE=eth1# Enable Nova/Cinder ComputeNode serviceenable_service n-novnc n-cauthENABLED_SERVICES=n-cpu,n-net,n-api-meta,c-vol# Needed by cinder-volume serviceDATABASE_TYPE=mysql# ControllerNode ipaddressSERVICE_HOST=192.168.56.102MYSQL_HOST=$SERVICE_HOSTRABBIT_HOST=$SERVICE_HOSTGLANCE_HOSTPORT=$SERVICE_HOST:9292NOVA_VNC_ENABLED=TrueNOVNCPROXY_URL="http://$SERVICE_HOST:6080/vnc_auto.html"VNCSERVER_LISTEN=$HOST_IPVNCSERVER_PROXYCLIENT_ADDRESS=$VNCSERVER_LISTEN```bash### 附：本次部署过程中用到的`local.conf`文件本次部署过程中，我们开启了`Sahara`服务，`ceilometer`服务，`aodh`服务和`heat`服务，这几项服务Devstack部署过程中默认是不安装的，需要手动开启，另外还有一些其他的组件也可以在部署过程中开启。具体的方法，可以在Openstack官网相应组件的介绍的`xxx and devstack`页面下找到。`local.conf`文件内容：```bash[[local|localrc]]############################################################# Customize the following HOST_IP based on your installation############################################################HOST_IP=10.10.87.5#NEUTRON_CREATE_INITIAL_NETWORKS=FalseGIT_BASE=http://git.trystack.cnNOVNC_REPO=http://git.trystack.cn/kanaka/noVNC.gitSPICE_REPO=http://git.trystack.cn/git/spice/spice-html5.gitSERVICE_PASSWORD=123ADMIN_PASSWORD=123SERVICE_TOKEN=123IP_VERSION=4DATABASE_PASSWORD=123RABBIT_PASSWORD=123############################################################# Customize the following section based on your installation############################################################# Pip#PIP_USE_MIRRORS=False#USE_GET_PIP=1#OFFLINE=False#RECLONE=True#ENABLE_IDENTITY_V2=False# LoggingLOGFILE=$DEST/logs/stack.sh.logSCREEN_LOGDIR=$DEST/logs/screenVERBOSE=TrueENABLE_DEBUG_LOG_LEVEL=TrueENABLE_VERBOSE_LOG_LEVEL=True# Neutron ML2 with OpenVSwitch#Q_PLUGIN=ml2#Q_AGENT=openvswitch#Q_DVR_MODE=dvr_snat#enable_plugin gbp http://git.trystack.cn/openstack/group-based-policy master#enable_service neutron#enable_service q-svc#enable_service q-agt#enable_service q-meta#enable_service q-dhcp#enable_service q-l3#disable_service n-net#disable_service c-api cinder c-bak c-vol c-sch#disable_service tempest#disable_service heat h-api h-eng# Swift# -----# Swift is now used as the back-end for the S3-like object store. Setting the# hash value is required and you will be prompted for it if Swift is enabled# so just set it to something already:SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5# For development purposes the default of 3 replicas is usually not required.# Set this to 1 to save some resources:SWIFT_REPLICAS=1# The data for Swift is stored by default in (``$DEST/data/swift``),# or (``$DATA_DIR/swift``) if ``DATA_DIR`` has been set, and can be# moved by setting ``SWIFT_DATA_DIR``. The directory will be created# if it does not exist.SWIFT_DATA_DIR=$DEST/data# Enable saharaenable_plugin sahara http://git.trystack.cn/openstack/sahara# Enable sahara-dashboardenable_plugin sahara-dashboard http://git.trystack.cn/openstack/sahara-dashboard#Enable heat servicesenable_service h-eng h-api h-api-cfn h-api-cw#Enable heat pluginenable_plugin heat http://git.trystack.cn/openstack/heatIMAGE_URL_SITE="http://download.fedoraproject.org"IMAGE_URL_PATH="/pub/fedora/linux/releases/25/CloudImages/x86_64/images/"IMAGE_URL_FILE="Fedora-Cloud-Base-25-1.3.x86_64.qcow2"IMAGE_URLS+=","$IMAGE_URL_SITE$IMAGE_URL_PATH$IMAGE_URL_FILE#Enable ceilometer and aodh serviceCEILOMETER_BACKEND=mongodbenable_plugin ceilometer http://git.trystack.cn/openstack/ceilometerenable_plugin aodh http://git.trystack.cn/openstack/aodh#Enable OSprofiler serviceCEILOMETER_NOTIFICATION_TOPICS=notifications,profiler Reference Devstack官网 Devstack配置文件详解 Openstack 实现技术分解 (1) 开发环境 — Devstack 部署案例详解 Openstack 开发人员安装脚本解读 DevStack剖析 （二）DevStack配置过程简述 Openstack部署工具总结——陈沙克日志 devstack安装和测试——陈沙克日志 国内的Openstack的git库: http://git.trystack.cn/cgit 以上只是个人使用Devstack的一个学习过程的总结，其中难免有疏漏或者不当的地方，敬请指出！ 文中部分内容来源于网络，在此对于原作者表示感谢！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F25%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
